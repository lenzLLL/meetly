import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/theme_provider";
import { ClerkProvider } from "@clerk/nextjs";
import {NextIntlClientProvider, hasLocale} from 'next-intl';
import {notFound} from 'next/navigation';
import {routing} from '@/i18n/routing';
import { UsageProvider } from "@/context/UsageContext";
import { ConditionalLayout } from "@/components/conditional-layout";
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};
export function generateStaticParams() {
  return routing.locales.map((locale) => ({locale}));
}

export default async function RootLayout({
  children,
  params
}: Readonly<{
  children: React.ReactNode;
   params: Promise<{locale: string}>;
}>) {
    const {locale} = await params;
  if (!hasLocale(routing.locales, locale)) {
    notFound();
  }

  
  return (
    <ClerkProvider>
    <html lang={locale} suppressHydrationWarning className="dark">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        suppressHydrationWarning
      >
             <ThemeProvider
            attribute="class"
            defaultTheme="dark"
            enableSystem={true}
            disableTransitionOnChange
          >
             <NextIntlClientProvider>
              <UsageProvider>
                    <ConditionalLayout>
            {children}

                    </ConditionalLayout>
            </UsageProvider>
            </NextIntlClientProvider>
          </ThemeProvider>
      </body>
    </html>
    </ClerkProvider>
  );
}
